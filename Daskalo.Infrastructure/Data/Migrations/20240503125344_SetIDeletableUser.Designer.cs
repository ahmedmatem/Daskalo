// <auto-generated />
using System;
using Daskalo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Daskalo.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240503125344_SetIDeletableUser")]
    partial class SetIDeletableUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Group description.");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group image.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique school identifier the group belongng to.");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Group short name.");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creator unique identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups", t =>
                        {
                            t.HasComment("Model of a group in the school.");
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.GroupMember", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupsAndMembers", (string)null);
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.GroupTopic", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("GroupsAndTopics", (string)null);
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Option", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether the option is the question correct answer.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image that could be attached to the option of the question.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Message for those who choose this option.");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the option.");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Text represents the  content of the option.");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options", t =>
                        {
                            t.HasComment("Question option data model.");
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image that could be attached to the text content of the question.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<bool>("MultipleAnswers")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the question allows multiple answers or not.");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int")
                        .HasComment("The number of order in the sequence of questions in the quiz.");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasComment("The question points.");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the Quiz the question belongs to.");

                    b.Property<bool>("ShuffleOptions")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the options in the question must be shuffled or not.");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Text representing the content of the question.");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions", t =>
                        {
                            t.HasComment("Question data model.");
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Quiz", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the Quiz");

                    b.HasKey("Id");

                    b.ToTable("Quizzes", t =>
                        {
                            t.HasComment("Quiz data model.");
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("The name of the city where school is located.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the school administrator.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("School");

                    b.HasData(
                        new
                        {
                            Id = "2f02f960-3723-401e-9d67-02cc4889c78a",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 5, 3, 15, 53, 36, 932, DateTimeKind.Local).AddTicks(7907),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "740165c4-e6e7-4fc1-882f-33a1c0d00ebb",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 5, 3, 15, 53, 36, 936, DateTimeKind.Local).AddTicks(8908),
                            IsDeleted = false,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "bc25ab8a-4478-46d3-a44e-0fcf146d0d73",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 5, 3, 15, 53, 36, 936, DateTimeKind.Local).AddTicks(8944),
                            IsDeleted = false,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "ce178b85-8861-4cc1-8462-461010c4136a",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 5, 3, 15, 53, 36, 936, DateTimeKind.Local).AddTicks(8950),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the creator of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.TopicAndResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicResurceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TopicId", "TopicResurceId");

                    b.HasIndex("TopicResurceId");

                    b.ToTable("TopicsAndResources", (string)null);
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource specific icon.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to the resource.");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the creator of the resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TopicResources");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5ea08caf-39a9-445e-9e5f-cb12a533a707",
                            ConcurrencyStamp = "5ea08caf-39a9-445e-9e5f-cb12a533a707",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6d371618-2ced-4429-9429-2643b2a2650c",
                            ConcurrencyStamp = "6d371618-2ced-4429-9429-2643b2a2650c",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "c4ab6e9d-ce41-4d21-bc85-22e18c09996e",
                            ConcurrencyStamp = "c4ab6e9d-ce41-4d21-bc85-22e18c09996e",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "13327c1c-010e-4dbf-b329-39d351ce2397",
                            RoleId = "5ea08caf-39a9-445e-9e5f-cb12a533a707"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("User full name.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasComment("The role of the user in school - teacher or student");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the user wants to participate in.");

                    b.HasIndex("SchoolId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "13327c1c-010e-4dbf-b329-39d351ce2397",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2422e1b-b4a0-450d-9544-34000afc81cd",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMlHpdNbXasHR6XWopjtw4FPINhxCkBAc+pPguOoZAaVl1+R/LdU69x366j0CA/xrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b3e57dd-cdeb-43d5-8388-18d7220fc83c",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com",
                            FullName = "Ахмед Матем Ахмед",
                            IsDeleted = false,
                            Role = 1,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "4e86579a-8c1a-439b-af11-e7f89667f53b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aff9961a-c754-43e2-8c33-54c829397858",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGUZ2v4vdsLngYsjrZRX7hq4lerzm8jH23RDdSEq0AfIWiDk0FZGxD2EQR9rj4Zhmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fcf0878-2d9f-4d9a-a778-a8fcd7b000e0",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            IsDeleted = false,
                            Role = 4,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "158c8b55-4609-46de-85d5-d0607385e31a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf0cb6e9-78b5-4c65-8ab2-9123967c3dcc",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG57DWd1tCZNwOE7z5wA7d71dFD3Jj0WC/JBzt2LjQMVO+Ru6Gt2ZGxrCyCcVWHslQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c441b7b-21d8-4d42-9b67-d2406520f443",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com",
                            FullName = "Турхан Мюмюнов Сюлейманов",
                            IsDeleted = false,
                            Role = 4,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "0a66ad63-f0c2-456e-a0d9-d163325c44eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edbf9020-ef25-42eb-a806-c5552c30459a",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNNunaIA4CfF51a5CmPbFBnyMx2VOG0JJy/qgscd4kIX//FUWWkxozac1CePjPfHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f562e04-4536-4ee8-9fe5-31eb5b4a11af",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            FullName = "Мартин Иванов Катев",
                            IsDeleted = false,
                            Role = 4,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "7b8e00a7-6b6b-45d6-81d2-ef0f1cde6b5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6a0f916-22c4-4851-9ce0-38589f9bed00",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBPtDKYlGrw0vb4ckDeYGUj7Outh2EiAskfzHHs+7H4m+j5ClpRTmNTdZ1xo0p57/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fbdaaee-5ccd-4aaf-a42a-5fb262d8f374",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com",
                            FullName = "Десислава Иванова Петкова",
                            IsDeleted = false,
                            Role = 4,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "30e3ca89-a114-478e-9347-a07992ae0456",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53466925-c754-452c-985d-16db50620965",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHxvgLAWTsdqTHR7V1MskuRbxVUg5IooV7awU0kmz/ahvyXBHGwJUnJJwGVYB2ghJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc41a1e6-300d-4775-9237-3975b52df9d8",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            IsDeleted = false,
                            Role = 4,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "a3e7f1c6-b765-4b9e-b6b9-c2e0bef25a54",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd18662e-113b-44ad-aff8-3c1ca795da79",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELi86Fqrjvsxivb+fLDHG2cSxGIm70UzYQUO0q3GBoqypB0lXmHgNWOr0H8u8BmKFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c413305e-f849-472c-97ce-d03f7d71351d",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com",
                            FullName = "Баран Б. Бехчет",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "746521fb-a9b7-42b6-812e-a8814ab264b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93e6a559-e59e-4248-a39a-743895205dbe",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELzTc/Ny82TAqkJN42GMjcEOZ7uH2OmHq6iUV45Id8UWIOZPfcnM/jA+mezLmE4WmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d17e8830-b2f8-48c3-982b-3e2f142dec97",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com",
                            FullName = "Виктория К. Петкова",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "5e6efd70-d8a6-446b-a1d7-a06664f3fa7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "009b173a-1d46-4f88-8ae7-45e794977edd",
                            Email = "viki@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKI@GMAIL.COM",
                            NormalizedUserName = "VIKI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ4VWZwG+IIR28dcK6E1CF4OKU9AaYk/x/WP1+CXQ9tNlhCC0clXcOa+QDWufK8ZZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efcfb9a6-1150-4927-841c-d978248b469d",
                            TwoFactorEnabled = false,
                            UserName = "viki@gmail.com",
                            FullName = "Виктория Р. Маркова",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "0be64273-2bec-499b-85ca-98afa3c33e4b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe4e3428-b300-4cef-81da-9eade4fcf24d",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIEwALNnFG9PAMcBNEuKbN14//+KD7R2NTzXub30BSuwPNn1GmVBVnlfm3SBhMa1zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6bb692c-211f-4f5c-95a3-10ae1250ea23",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com",
                            FullName = "Даниел Г. Христов",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "12dd5643-4f7c-4447-97bd-5b1880f98a7d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "504e346a-8c24-4a0d-8885-446d1e242480",
                            Email = "dani@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANI@GMAIL.COM",
                            NormalizedUserName = "DANI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIaRZbUee5dlAOS+s7VtDyfnOqlkUaV4eqzp5QeIVXtF7BHBDMfS14QZzkloPQzfSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "715a127b-b940-457f-bcde-598cd0ec2010",
                            TwoFactorEnabled = false,
                            UserName = "dani@gmail.com",
                            FullName = "Даниел П. Петров",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "9919e9c2-6514-434c-a8ba-703b253c189c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "245ad94b-d590-487a-9c4f-1ece6de3dce0",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBO8fARkF+xrfbCrZxPd3TBqPjKSIjWdZvznfHOIXkeAZ+osMOlge/k9mNLTUenMqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1877991b-b589-4243-affd-61a4f4249879",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com",
                            FullName = "Димана В. Кънчева",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "588ac93b-088e-4d0c-a6ec-7a0c2c0157a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cf2c648-b6a2-4b3b-bf6f-fafd719a02fd",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECet+2WQfoF/VslVFwzqlVjqfyZCjjObZRW4Va+wXej+FzDILy4el/Qitb1llUuQ4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85277270-da53-4de2-9636-8b529ff680a7",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com",
                            FullName = "Димитър Н. Димитров",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "e0c559ab-a96f-4b75-b896-5caea2bbd098",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2783094c-73f8-4a47-bf80-fb3336ff4fa7",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECr/O9ANitpZeEun+cksYnkK1Q2rcKg4IKyjF4YGkeEOrLnCjzcDdKPkg0BTXW1lZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8465de80-f7cb-4fe4-b000-3b4bb6bcb20b",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com",
                            FullName = "Емре Е. Хюсеин",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "2e96b8e7-2e43-4414-8099-7c8c8404e1a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eddcbe2e-7697-444a-a329-134d487ff54b",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENW4QZd9/8ACm1ZKozAPoUkpwAloeJjrub3gGRxUGnsITUleGBbzavsXTt0zxod9Qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1001d2b7-fa60-4ce1-9410-fc3c6ec26f84",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com",
                            FullName = "Ивайла Д. Александрова",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        },
                        new
                        {
                            Id = "34b7fe60-f77a-4b4d-b53d-27a15ead898f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da711a3d-c059-4ae2-8ffc-b9c1dd8d3987",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGm+XirHUMELMAzLF4z2vHLXBygwsqe8m/5OMdTqcbLJgyNTqH5XLOrK5r7QTezZCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59acb299-3b85-40a3-a4eb-be8fcb15ee09",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            FullName = "Иван Д. Генчев",
                            IsDeleted = false,
                            Role = 8,
                            SchoolId = "2f02f960-3723-401e-9d67-02cc4889c78a"
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.GroupMember", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.GroupTopic", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Daskalo.Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Option", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.QuizModels.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Question", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.QuizModels.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Daskalo.Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.Topic", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.TopicAndResource", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Daskalo.Infrastructure.Data.Models.TopicResource", "TopicResource")
                        .WithMany()
                        .HasForeignKey("TopicResurceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("TopicResource");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.School", null)
                        .WithMany("Members")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("School")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
