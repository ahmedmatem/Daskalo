// <auto-generated />
using System;
using Daskalo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Daskalo.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240502200446_SetRoleFlags")]
    partial class SetRoleFlags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Group description.");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group image.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique school identifier the group belongng to.");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Group short name.");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creator unique identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups", t =>
                        {
                            t.HasComment("Model of a group in the school.");
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.GroupMember", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupsAndMembers", (string)null);
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.GroupTopic", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("GroupsAndTopics", (string)null);
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Option", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether the option is the question correct answer.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image that could be attached to the option of the question.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Message for those who choose this option.");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the option.");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Text represents the  content of the option.");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options", t =>
                        {
                            t.HasComment("Question option data model.");
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image that could be attached to the text content of the question.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<bool>("MultipleAnswers")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the question allows multiple answers or not.");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int")
                        .HasComment("The number of order in the sequence of questions in the quiz.");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasComment("The question points.");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the Quiz the question belongs to.");

                    b.Property<bool>("ShuffleOptions")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the options in the question must be shuffled or not.");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Text representing the content of the question.");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions", t =>
                        {
                            t.HasComment("Question data model.");
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Quiz", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the Quiz");

                    b.HasKey("Id");

                    b.ToTable("Quizzes", t =>
                        {
                            t.HasComment("Quiz data model.");
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("The name of the city where school is located.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the school administrator.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("School");

                    b.HasData(
                        new
                        {
                            Id = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 5, 2, 23, 4, 41, 232, DateTimeKind.Local).AddTicks(765),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "35bdb096-31a5-4051-bb7c-341213875938",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 5, 2, 23, 4, 41, 235, DateTimeKind.Local).AddTicks(3113),
                            IsDeleted = false,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "892a9d5b-e3a6-4649-a035-daac2d19096b",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 5, 2, 23, 4, 41, 235, DateTimeKind.Local).AddTicks(3162),
                            IsDeleted = false,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "671dbf77-bee1-4908-8ffa-127e215cb43b",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 5, 2, 23, 4, 41, 235, DateTimeKind.Local).AddTicks(3168),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the creator of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.TopicAndResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicResurceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TopicId", "TopicResurceId");

                    b.HasIndex("TopicResurceId");

                    b.ToTable("TopicsAndResources", (string)null);
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource specific icon.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to the resource.");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the creator of the resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TopicResources");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "73b412ab-43a4-42d8-a09e-a4429a43290f",
                            ConcurrencyStamp = "73b412ab-43a4-42d8-a09e-a4429a43290f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f5ced019-519b-4c6c-a186-cab3c515dfdf",
                            ConcurrencyStamp = "f5ced019-519b-4c6c-a186-cab3c515dfdf",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "77c7dc0e-0509-4779-94f6-86c5c9c8076c",
                            ConcurrencyStamp = "77c7dc0e-0509-4779-94f6-86c5c9c8076c",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f6b7a04c-962e-4f63-93aa-21b8b5321464",
                            RoleId = "73b412ab-43a4-42d8-a09e-a4429a43290f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("User full name.");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasComment("The role of the user in school - teacher or student");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the user wants to participate in.");

                    b.HasIndex("SchoolId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "f6b7a04c-962e-4f63-93aa-21b8b5321464",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dddfcfb3-704c-4c15-b09c-4b1e568c60cd",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELH7mq3pPLxqpp7bE8aEFQ9Qv0PP73MydyXv6+F8NQ6wpOjehxKnt8IdCnYSuZuvAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "472d236a-f924-4245-a172-884ac5367b6d",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com",
                            FullName = "Ахмед Матем Ахмед",
                            Role = 1,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "ed906163-98c8-430b-a07c-66f2b418e49d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c688e4d-e0f9-4760-80c8-721ce144d361",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENG2dz9za4YqqiakWjuWPTOLSAmaCgKp2/iTDkKc2V1Baa5iqJUUqWV+w0YrggxYSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48a2fcc3-0098-4382-aeef-aad2d3cc16db",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            Role = 4,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "9c5dc1b0-6667-4a4d-b5b7-bcf80751c5ea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd6c36f6-116c-4ed0-a847-396e6953b564",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFA09Pd3z6IPqeCtIbVX6Saso+/BUEy6fiIL/1iL/V3gfWEmHdrSqVLoPn7ic0URDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3252ad6-444e-444d-8fcc-06f54894d558",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com",
                            FullName = "Турхан Мюмюнов Сюлейманов",
                            Role = 4,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "efdec5af-fce1-4127-b367-7e2edb6ff8f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eaa81923-a351-4e3c-902a-d2840895396e",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO3wQE2SznQqnFeQh5s8ujFlT7a67ujEpDQPPnd4muqYfdXI35ttOUWOdsqg23f5Wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "930a48fc-f291-4bf4-b34b-9cfcdd854b08",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            FullName = "Мартин Иванов Катев",
                            Role = 4,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "f2d3fefd-ad82-420e-8d64-b294583be86b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f9a3199-4291-4931-932f-cb0e812f1d13",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMamdeNmrqBxi31s84BplEF68xfXL7Vxy02nn1FxwcOsGH64vcPWOh1enVihBkxzog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0032f347-5284-45f0-9094-f3a5cb26e20c",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com",
                            FullName = "Десислава Иванова Петкова",
                            Role = 4,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "5dcb673e-2881-4889-92bd-e6752d046313",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7804a62a-dec5-46f9-8e7a-0f3b3e5a632a",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECNOSaO7FiDpU+EwVb7O+NtCuPPaf/s+EQvJ4/6qYThSy+93YDypCadIwkb9hKGRMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd4226e0-d9ec-4bd3-a915-df5c5d00a76c",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            Role = 4,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "2cdf7492-10bb-424f-881f-8e820e5c56d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfb25361-cb46-4d3c-8190-6058c3e45a59",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIB5M5KGy1DJLEyPKF0XWa86ahgKRYszcKUUE2DU3hdd3OQZdIHwjGXybwkCJ8oagA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e596ddcc-7b30-438c-9108-7cc82f2115e2",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com",
                            FullName = "Баран Б. Бехчет",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "f2fc4814-32a6-4e79-84b5-658e4c8a88df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d9e6062-8cb5-49c5-bf3e-64ce56e94b69",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENBJhByjvJs6N6cBfu0AAWPalRxAFokUzzv5PzWHpvh8aAQSQfsxdagTJyMzjp6k2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f360132-e92e-463a-af61-78b3954cd6ec",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com",
                            FullName = "Виктория К. Петкова",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "951e48fa-252c-48a9-b11a-ab5ead777c79",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e2fc312-1ac1-4ad7-ad3f-502e3c495092",
                            Email = "viki@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKI@GMAIL.COM",
                            NormalizedUserName = "VIKI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM9C0TtzbPCwBgzvzSEGzTCCcLJH3d5qyyzoDpExWp/uJVNDL7wRhHU7DLOBxxDztA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bfa6a78-88be-43ad-94e6-2f2aab150fc1",
                            TwoFactorEnabled = false,
                            UserName = "viki@gmail.com",
                            FullName = "Виктория Р. Маркова",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "9ceac608-9747-4d62-8aca-0d3191af100f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0eb40e98-a76b-4506-be56-a1cce43a1ba1",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMS/79KIiOA8n7ROM/bSmNHKg3yZJxOv43cdF54vmuKGu810A6H7p6JiLDl65V1DjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "baefd265-4b67-4408-bd8c-b7dab21f55dd",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com",
                            FullName = "Даниел Г. Христов",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "9cf77fff-956e-4345-9d9d-cf29f4a64eef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0c60bc6-0b21-47df-8f18-5370d09541fc",
                            Email = "dani@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANI@GMAIL.COM",
                            NormalizedUserName = "DANI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKb3oVbMMSRx6utLrxZQue4X3DW8E0F9UpZpgseBLfwkseSGP+n9NA8Ma8xtWlqUoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9675288c-3249-4aac-9e3b-94c944915e6c",
                            TwoFactorEnabled = false,
                            UserName = "dani@gmail.com",
                            FullName = "Даниел П. Петров",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "27088276-fa47-44e9-94eb-46e87c328fd2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33c64d79-d981-44dc-b7bc-d62b21e55bbd",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDMK+ad5+vJzS4YKadhWnC0lE9AEYiQTONxn94UuDWpSGOUgHtbkriDaYEkRF7G/vQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afe17e63-6c14-4fcb-8db2-a4795c768aac",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com",
                            FullName = "Димана В. Кънчева",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "700b5744-c59f-4354-b310-1f1a43f594ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eceae4ee-b85c-4054-a45e-5a9ded379ef1",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM3WHE1v5snI2OvSfGTrZihOEV0G6zE0m0QJ7iFErDv1VdHygjLqyAPUDB5jK+gznA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48a7540a-268e-48c0-a871-af09c26541e2",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com",
                            FullName = "Димитър Н. Димитров",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "82b35601-4600-42de-91d8-113af52a9c97",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1722ef9f-705a-47f5-8d5b-9dc26642d935",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG55gt91osxKhNlzBMdwvRgc006ImwUbUDyJeNBaZCZ+dpze9wkuaOeGYaHHwYoC2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e7a64bb-3661-4287-a867-4d1039e92cbf",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com",
                            FullName = "Емре Е. Хюсеин",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "e49d51c2-1207-401f-b0c6-6847cc5f2163",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3dddc470-d0ba-4387-939a-73b2d6921390",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENXtxlsIkNXtaKO45BvoSj0NnH9nPuFrYFw5kC3WUwFy3ea07JCzaszBWhA0vbd69Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ebad8dd-4dc6-47e7-8119-2825c9b78c8a",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com",
                            FullName = "Ивайла Д. Александрова",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        },
                        new
                        {
                            Id = "a39a6063-3c3e-4d14-adea-8cfe664746dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "609cf3d2-2d2c-41b9-a87e-50566034c441",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECCZGxwk0uFl0VL1cK2bi/pOoXsqL8JwPG7Dr0EuBLlnaR0FgwrbUzTmzwZzcfQnLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe50cb04-36a0-467f-bfe2-3b30d32ba7a5",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            FullName = "Иван Д. Генчев",
                            Role = 8,
                            SchoolId = "286d82c7-09aa-4dd6-9a3a-b7731c647ffc"
                        });
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.GroupMember", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.GroupTopic", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Daskalo.Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Option", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.QuizModels.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Question", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.QuizModels.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Daskalo.Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.Topic", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.TopicAndResource", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Daskalo.Infrastructure.Data.Models.TopicResource", "TopicResource")
                        .WithMany()
                        .HasForeignKey("TopicResurceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("TopicResource");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("Daskalo.Infrastructure.Data.Models.School", null)
                        .WithMany("Members")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.QuizModels.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Daskalo.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("School")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
